*ui.nvim-ui*                                   Modifying Neovim's UI using lua

‚ñå üìú Note
‚ñå This is still considered experimental, so some behavior may change in the
‚ñå future.
‚ñå This wiki will be valid for the `main`(current `0.11`) branch of Neovim.

Neovim‚Äôs UI can be modified using `Lua` via the `vim.ui_attach()` function.
See `:h vim.ui_attach()`.

You typically start with something like this,

>lua
  ---@type integer Namespace for the UI(s).
  local namespace = vim.api.nvim_create_namespace("ui");
  
  vim.ui_attach(namespace, {
      ext_messages = true,
      -- ext_cmdline = true
  }, function (event, ...)
      --- {event}, Event name
      --- {...}, Arguments this event produces.
      --- Do stuff...
  end);
<

Of course, by itself this doesn‚Äôt do much. But this allows you to do various
things based on the value of `event`.

And, if you ever want to revert to the original UI. You can simply do it via
`vim.ui_detach()`. See `:h vim.ui_detach()`.

>lua
  vim.ui_detach(namespace);
<

‚ñå üí° Tip
‚ñå I recommend you checkout `:h ui.txt` before progressing further.

This page explains how the ui.lua¬π file works.

------------------------------------------------------------------------------
üìö Toggling custom UI

‚ñå üí° Tip
‚ñå You can check the value of `ui.enabled` to see if the UI is attached or not!

The custom UI can be enabled by triggering the `attach()` function. This
function triggers `vim.ui_attach()`(see `:h vim.ui_attach()`) and redirects UI
events to the various sub-modules.

‚ñå üí° Tip

You can visualize how events are handled like so,

>txt
  vim.ui_attach() --> event_map ==> handle() ==> ...
<

You can also detach the plugin from the UI at any time by calling the
`detach()` function. This will trigger `vim.ui_detach()`(see
`:h vim.ui_detach()`) which will detach the plugin from the UI.

------------------------------------------------------------------------------
üìö Handling errors

To prevent internal errors from affecting Neovim, the function calls for the
UI are wrapped in `pcall()`.

>lua
  -- ‚ùå Bad
  some_function();
  
  -- ‚úÖ Good
  pcall(some_function);
<

------------------------------------------------------------------------------

Link references ~

 1: https://github.com/OXY2DEV/ui.nvim/blob/main/lua/ui.lua
 2: https://github.com/OXY2DEV/ui.nvim/blob/4c2aeb8847677e318f835f710fdc7f0073c6f719/lua/ui.lua#L8-L42


vim:ft=help:tw=78:ts=2:
