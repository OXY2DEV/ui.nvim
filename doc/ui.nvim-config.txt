*ui.nvim-config*                               Configuration options for `ui.nvim`

This plugin can be configured via the `setup()` function. You can check the
default configuration hereÂ¹.

â–Œ ðŸ’¡ Tip
â–Œ You can find the type definitions for the options hereÂ².

>lua
  require("ui").setup({
      cmdline = {
          enable = true
      },
  
      messages = {
          enable = true
      },
  
      popupmenu = {
          enable = true
      }
  });
<

------------------------------------------------------------------------------
ðŸ”© Cmdline options                                    *ui.nvim-config.cmdline*

Used by the command-line. It has the following structure,

>lua
  ---@type ui.config.cmdline
  cmdline = {
      enable = true,
      styles = {
          default = {}
      }
  }
<

enable ~

  â€¢ Type: `boolean`
  â€¢ Default: `true`

Whether to use the custom command-line.

styles ~

    Type: `table<string, ui.cmdline.style>`

Styles for the command-line.

You can set the default style using the `default` key. Each style has the
following structure,

>lua
  example = {
      condition = function ()
          return true;
      end,
  
      cursor = "Cursor",
      filetype = "vim",
      icon = nil,
  
      offset = 0,
      title = {
          {
              { "Some title: ", "Comment" }
          }
      },
  
      winhl = ""
  }
<

â–Œ ðŸ“œ Note
â–Œ All the options mentioned below can be `functions` too and they will receive
â–Œ the same parameters as `condition`.

The value of the matched style will get automatically merged with the other
styles when they are used, so you donâ€™t need to define the same style
everywhere. For example, if a style doesnâ€™t have `winhl` the value of `winhl`
will be taken from `default`.

CONDITION

  â€¢ Type: function (state: ui.cmdline.state, lines: string[]): boolean

Condition for the style. `state` is the command-line state and `lines` is the
lines shown in the command-line window.

The `state` looks something like this,

â–Œ ðŸ“œ Note
â–Œ parameter name in `:h ui-cmdline`.

>lua
  {
      firstc = ":",
      level = 1,
  
      prompt = nil,
      lines = {}
  }
<

CURSOR

  â€¢ Type: `string`

Highlight group for the cursor.

FILETYPE

  â€¢ Type: `string`

File type of the command-line.

ICON

  â€¢ Type: `[ string, string? ][]`

Icon for the command-line. Has the same structure as `virtual text`.

OFFSET

  â€¢ Type: `integer`

Character offset. The number of characters to hide from the start.

Used for `:!`, `:=`, `:lua` etc.

TITLE

  â€¢ Type: `( [ string, string? ][] )[]`

Title to show above the command-line. Has the same structure as
`virtual lines`.

WINHL

  â€¢ Type: `string`

Value of the `winhl` option for the command-line window.

------------------------------------------------------------------------------
ðŸ”© Message options                                   *ui.nvim-config.messages*

Used by the messages. It has the following structure,

>lua
  ---@type ui.config.message
  message = {
      enable = true,
  
      history_winconfig = {},
      message_winconfig = {},
      list_winconfig = {},
      confirm_winconfig = {},
  
      is_list = function ()
          return false;
      end,
      ignore = function ()
          return false;
      end,
  
      confirm_styles = {
          default = {}
      },
      list_styles = {
          default = {}
      },
      msg_styles = {
          default = {}
      }
  }
<

enable ~

  â€¢ Type: `boolean`
  â€¢ Default: `true`

Whether to use custom messages.

history_winconfig ~

  â€¢ Type: `table`

Configuration table for the history window. Has the same options as `{opts}`
in `nvim_open_win()`.

message_winconfig ~

  â€¢ Type: `table`

Configuration table for the message window. Has the same options as `{opts}`
in `nvim_open_win()`.

list_winconfig ~

  â€¢ Type: `table`

Configuration table for the list message window. Has the same options as
`{opts}` in `nvim_open_win()`.

confirm_winconfig ~

  â€¢ Type: `table`

Configuration table for the confirmation message window. Has the same options
as `{opts}` in `nvim_open_win()`.

is_list ~

  â€¢ Type: fun(kind: ui.message.kind, content: ui.messages.fragment[]: boolean

Function to determine whether a message should be treated like a list or not.

â–Œ ðŸ“œ Note
â–Œ Some messages are considered lists(e.g.Â `:set`), even if they only have a
â–Œ single line. You can use these to filter those message out.

ignore ~

  â€¢ Type: fun(kind: ui.message.kind, content: ui.messages.fragment[]: boolean

Function to determine whether a message should be ignored or not.

â–Œ ðŸ’¡ Tip
â–Œ You can use this to reduce visual clutters!

confirm_styles ~

    Type: table<string, ui.message.confirm>

Changes how different confirmation messages are shown. Each style has the
following structure,

>lua
  example = {
      condition = function ()
          return true;
      end,
  
      border = "rounded",
      col = 0,
      height = 1,
  
      modifier = function ()
          return {
              lines = {},
              extmarks = {}
          };
      end,
  
      row = 0,
      width = 10,
  
      winhl = ""
  }
<

CONDITION

  â€¢ Type: fun(msg: ui.mesaage.entry, lines: string[], extmarks:
    ui.message.fragment[][]): boolean

Condition for this style.

BORDER

  â€¢ Type: "single" | "rounded" | "double" | "solid" | "shadow" | string[] | [
    string string? ][]

Window border.

COL

  â€¢ Type: `integer`

Column position of the confirmation window.

HEIGHT

  â€¢ Type: `integer`

Height of the confirmation window.

MODIFIER

  â€¢ Type: fun(msg: ui.mesaage.entry, lines: string[], extmarks:
    ui.message.fragment[][]): { lines: string[], extmarks:
    ui.message.fragment[][] }

Used to modify the contents of the message.

ROW

  â€¢ Type: `integer`

Row position of the confirmation window.

WIDTH

  â€¢ Type: `integer`

Width of the confirmation window.

WINHL

  â€¢ Type: `string`

Value of the `winhl` option for the confirmation window.

list_styles ~

    Type: table<string, ui.message.confirm>

Changes how different list messages are shown. It has the same structure as
`confirm_styles`.

msg_styles ~

    Type: `table<string, ui.message.style>`

Changes how messages are shown. Each style has the following structure,

>lua
  example = {
      condition = function ()
          return true;
      end,
  
      decorations = {},
      history_decorations = {},
  
      duration = 5000,
      modifier = function ()
          return {
              lines = {},
              extmarks = {}
          };
      end
  }
<

CONDITION

  â€¢ Type: fun(msg: ui.mesaage.entry, lines: string[], extmarks:
    ui.message.fragment[][]): boolean

Condition for this style.

DECORATIONS

  â€¢ Type: `ui.mesaage.decorations`

Decorations for the message. It has the following structure,

>lua
  decorations = {
      icon = {
          { "X ", "Comment" }
      },
      padding = nil,
      tail = nil,
  
      line_hl_group = "CursorLine"
  }
<

ICON

  â€¢ Type: `[ string, string? ][]`

Icon for this message. The structure is the same as `virtual text`.

PADDING

  â€¢ Type: `[ string, string? ][]`

Replaces `icon` for lines that are not the first line of the message.

TAIL

  â€¢ Type: `[ string, string? ][]`

Replaces `icon` for the last line of the message.

LINE_HL_GROUP

  â€¢ Type: `string`

Line highlight group for the message.

HISTORY_DECORATIONS

  â€¢ Type: `ui.message.decorations`

Same as `decorations`, but it will only be shown on the history window.

DURATION

  â€¢ Type: `integer`

The number of milliseconds the message should be visible for.

MODIFIER

  â€¢ Type: fun(msg: ui.mesaage.entry, lines: string[], extmarks:
    ui.message.fragment[][]): { lines: string[], extmarks:
    ui.message.fragment[][] }

Used to modify the contents of the message.

------------------------------------------------------------------------------
ðŸ”© Popupmenu options                                *ui.nvim-config.popupmenu*

Used by the pop-up menu. It has the following structure,

>lua
  popupmenu = {
      enable = true,
  
      entries = {
          default = {}
      },
  
      winconfig = {},
      max_height = 5,
  
      tooltip = nil
  }
<

enable ~

  â€¢ Type: `boolean`
  â€¢ Default: `true`

Whether to use the custom pop-up menu.

entries ~

    Type: table<string, ui.popupmenu.style>

Configuration for each entry in pop-up menu. Each entry has the following
structure,

>lua
  example = {
      condition = function ()
          return true;
      end,
  
      padding_left = " ",
      padding_right = " ",
  
      icon = " ",
      text = nil,
  
      normal_hl = nil,
      select_hl = "CursorLine",
      icon_hl = "Special"
  }
<

CONDITION

  â€¢ Type: function (word: string, kind: ui.popupmenu.kind, menu: string, info:
    string): boolean

Condition for the style `word` is the completion, `kind` is the type of
completion, `menu` is the extra text for the pop-up menu(for now this is
always â€œâ€œ).

PADDING_LEFT

  â€¢ Type: `string`

PADDING_RIGHT

  â€¢ Type: `string`

ICON

  â€¢ Type: `string`

TEXT

  â€¢ Type: `string`

Text to show instead of the actual completion.

NORMAL_HL

  â€¢ Type: `string`

Highlight group for the candidate.

SELECT_HL

  â€¢ Type: `string`

Highlight group for the candidate when selected.

ICON_HL

  â€¢ Type: `string`

Highlight group for the icon.

winconfig ~

  â€¢ Type: `table`

Window configuration for the pop-up menu.

max_height ~

  â€¢ Type: `integer`

Maximum height of the menu(when the menu is shown under cursor).

tooltip ~

  â€¢ Type: `[ string, string? ][]`

Allows adding some tooltip to the menu(the window must have a border for it to
work outside of command mode).

------------------------------------------------------------------------------

Link references ~

 1: https://github.com/OXY2DEV/ui.nvim/blob/4c2aeb8847677e318f835f710fdc7f0073c6f719/lua/ui/spec.lua#L5-L1000
 2: https://github.com/OXY2DEV/ui.nvim/tree/main/lua/definitions


vim:ft=help:tw=78:ts=2:
